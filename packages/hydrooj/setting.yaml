homepage:
  type: yaml
  desc: Homepage Config
  default:
    - width: 9
      bulletin: true
      contest: 5
      homework: 10
      training: 10
      ranking: 10
      discussion: 20
    - width: 3
      hitokoto: true
      starred_problems: 50
      recent_problems: 10
      discussion_nodes: true
      suggestion: true
langs:
  type: yaml
  desc: Code language settings
  default:
    __hint__:
      - ~ All keys starting with _ will be ignored
      - ~ Entries named like [foo], [foo].[bar] [foo].[baz]
      -   will be merged into one category.
      - ~ A entry named [foo].[bar] will inhert all options
      -   defined in entry [foo] if not overwritten
      - ~ code_file option defaults to foo.[name]
      - ~ highlight option defaults to [name]
      - ~ if highlight option was set, monaco option defaults
      -   to [highlight], otherwise defaults to [name]
      - ~ Compiling be be ignored if compile option wasn't set
      - ~ Key marked with a ? means the option is optional
      - (name):
          disabled?: whether to disable this language
          hidden?: won't show in the language selection
          compile?: Compile Command
          code_file?: Where to write code file when compiling, defaults to `foo.[name]`
          execute: Command to execute the program
          highlight?: PrismJS highlight mode
          monaco?: Monaco editor mode
          time_limit_rate?: Time limit rate
          target?: Compiler output file, defaults to `foo`
          display: Display name
          compile_time_limit?: Compile time limit, in milliseconds
          compile_memory_limit?: Compile memory limit, in MB
          address_space_limit?: Enable address space memory limit as CCF did
          process_limit?: Limit the number of thread
    bash:
      display: Bash
      code_file: foo.sh
      execute: /bin/bash foo.sh
      highlight: bash
      version: /bin/bash --version
    c:
      compile: /usr/bin/gcc -Wall --std=c99 -o foo foo.c -lm
      highlight: c
      monaco: c
      display: C
      version: /usr/bin/gcc --version
    cc:
      compile: /usr/bin/g++ -Wall -std=c++14 -o foo foo.cc -lm -I/include
      code_file: foo.cc
      highlight: cpp
      monaco: cpp
      display: C++
      address_space_limit: true
      process_limit: 1
      version: /usr/bin/g++ --version
    cc.cc98:
      compile: /usr/bin/g++ -Wall -std=c++98 -o foo foo.cc -lm -I/include
      display: C++98
    cc.cc98o2:
      compile: /usr/bin/g++ -Wall -std=c++98 -o foo foo.cc -lm -O2 -I/include
      display: C++98(O2)
    cc.cc11:
      compile: /usr/bin/g++ -Wall -std=c++11 -o foo foo.cc -lm -I/include
      display: C++11
    cc.cc11o2:
      compile: /usr/bin/g++ -Wall -std=c++11 -o foo foo.cc -lm -O2 -I/include
      display: C++11(O2)
    cc.cc14:
      display: C++14
    cc.cc14o2:
      compile: /usr/bin/g++ -Wall -std=c++14 -o foo foo.cc -lm -O2 -I/include
      display: C++14(O2)
    cc.cc17:
      compile: /usr/bin/g++ -Wall -std=c++17 -o foo foo.cc -lm -I/include
      display: C++17
    cc.cc17o2:
      compile: /usr/bin/g++ -Wall -std=c++17 -o foo foo.cc -lm -O2 -I/include
      display: C++17(O2)
    cc.cc20:
      compile: /usr/bin/g++ -Wall -std=c++20 -o foo foo.cc -lm -I/include
      display: C++20
    cc.cc20o2:
      compile: /usr/bin/g++ -Wall -std=c++20 -o foo foo.cc -lm -O2 -I/include
      display: C++20(O2)
    pas:
      compile: /usr/bin/fpc -O2 -o/w/foo foo.pas
      highlight: pascal
      display: Pascal
      version: /usr/bin/fpc -iW
    java:
      compile: /usr/bin/bash -c "javac -d /w -encoding utf8 ./Main.java && jar cvf Main.jar *.class >/dev/null"
      code_file: Main.java
      target: Main.jar
      execute: /usr/bin/java -cp Main.jar Main
      time_limit_rate: 2
      highlight: java astyle-java
      monaco: java
      display: Java
      compile_time_limit: 30000
      version: /usr/bin/javac -version
    kt:
      compile: echo "Invalid language selection"
      code_file: foo.kt
      execute: echo "Invalid language selection"
      time_limit_rate: 2
      highlight: kotlin
      monaco: kotlin
      display: Kotlin
    kt.jvm:
      compile: kotlinc -include-runtime -d foo.jar foo.kt
      target: foo.jar
      execute: /usr/bin/java -jar foo.jar
      display: Kotlin/JVM
      compile_time_limit: 30000
      version: /usr/bin/kotlinc -version
    py:
      compile: /usr/bin/python -c "import py_compile; py_compile.compile('/w/foo.py', '/w/foo', doraise=True)"
      code_file: foo.py
      execute: /usr/bin/python foo
      highlight: python
      display: Python
    py.py2:
      display: Python 2
      disabled: true
    py.py3:
      compile: /usr/bin/python3 -c "import py_compile; py_compile.compile('/w/foo.py', '/w/foo', doraise=True)"
      execute: /usr/bin/python3 foo
      display: Python 3
      version: /usr/bin/python3 --version
    py.pypy3:
      compile: /bin/bash -c "/usr/bin/pypy3 -c \"import py_compile; py_compile.compile('/w/foo.py', '/w/foo', doraise=True)\" && mv foo.py foo"
      execute: /bin/bash -c 'mv foo foo.py && /usr/bin/pypy3 -B foo.py'
      display: PyPy3
      version: /usr/bin/pypy3 --version
    php:
      execute: /usr/bin/php foo.php
      display: PHP
      version: /usr/bin/php -v
    rs:
      compile: /usr/bin/rustc -O -o /w/foo /w/foo.rs
      highlight: rust
      display: Rust
      version: /usr/bin/rustc --version
    hs:
      compile: /usr/bin/ghc -O -outputdir /tmp -o foo foo.hs
      highlight: haskell
      display: Haskell
      version: /usr/bin/ghc --version
    js:
      execute: /usr/bin/node /w/foo.js
      highlight: javascript
      display: NodeJS
      version: /usr/bin/node --version
    go:
      compile: /usr/bin/go build -o foo foo.go
      display: Golang
      version: /usr/bin/go version
    rb:
      execute: /usr/bin/ruby foo.rb
      highlight: ruby
      display: Ruby
      version: /usr/bin/ruby --version
    cs:
      compile: /usr/bin/mcs -optimize+ -out:/w/foo /w/foo.cs
      execute: /usr/bin/mono foo
      highlight: csharp
      monaco: csharp
      display: 'C#'
      version: /usr/bin/mcs --version
    r:
      display: R
      execute: /bin/sh -c "cat /dev/stdin >stdin && /usr/bin/Rscript --vanilla foo.r"
      highlight: r
